"""initial_3nf_schema

Revision ID: a04d1ee63830
Revises: 
Create Date: 2025-09-08 08:37:53.172712

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a04d1ee63830'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tags',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('connection_tags',
    sa.Column('connection_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['connection_id'], ['connections.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('connection_id', 'tag_id')
    )
    op.drop_index(op.f('idx_analysis_results_connection_id'), table_name='analysis_results')
    op.drop_index(op.f('idx_analysis_results_created_at'), table_name='analysis_results')
    op.drop_index(op.f('idx_analysis_results_execution_id'), table_name='analysis_results')
    op.drop_index(op.f('idx_analysis_results_type'), table_name='analysis_results')
    op.drop_table('analysis_results')
    op.alter_column('connection_status', 'connection_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('connection_status', 'last_check',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('connection_status', 'response_time_ms',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=True)
    op.drop_index(op.f('idx_connection_status_connection_id'), table_name='connection_status')
    op.drop_index(op.f('idx_connection_status_last_check'), table_name='connection_status')
    op.create_index(op.f('ix_connection_status_id'), 'connection_status', ['id'], unique=False)
    op.create_unique_constraint(None, 'connection_status', ['connection_id'])
    op.drop_constraint(op.f('connection_status_connection_id_fkey'), 'connection_status', type_='foreignkey')
    op.create_foreign_key(None, 'connection_status', 'connections', ['connection_id'], ['id'])
    op.drop_table_comment(
        'connection_status',
        existing_comment='Статус подключений к PostgreSQL',
        schema=None
    )
    op.alter_column('connections', 'vault_path',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='Путь в Vault где хранятся учетные данные (host, port, dbname, username, password)',
               existing_nullable=False)
    op.alter_column('connections', 'environment',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Окружение: development, staging, production',
               existing_nullable=True,
               existing_server_default=sa.text("'development'::character varying"))
    op.alter_column('connections', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Описание подключения для пользователей',
               existing_nullable=True)
    op.drop_constraint(op.f('connections_vault_path_key'), 'connections', type_='unique')
    op.drop_index(op.f('idx_connections_active'), table_name='connections', postgresql_where='(is_active = true)')
    op.drop_index(op.f('idx_connections_environment'), table_name='connections')
    op.drop_index(op.f('idx_connections_name_env'), table_name='connections')
    op.create_index(op.f('ix_connections_id'), 'connections', ['id'], unique=False)
    op.create_index(op.f('ix_connections_name'), 'connections', ['name'], unique=True)
    op.drop_table_comment(
        'connections',
        existing_comment='Метаданные подключений к PostgreSQL. Credentials хранятся в Vault.',
        schema=None
    )
    op.drop_column('connections', 'tags')
    op.alter_column('scheduled_tasks', 'task_type',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               comment=None,
               existing_comment='Тип задачи: log_analysis, config_check, query_analysis, custom_sql, table_analysis',
               existing_nullable=False)
    op.alter_column('scheduled_tasks', 'connection_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('scheduled_tasks', 'cron_schedule',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Расписание в формате Cron',
               existing_nullable=False)
    op.alter_column('scheduled_tasks', 'last_run_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('scheduled_tasks', 'next_run_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('scheduled_tasks', 'task_params',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               comment=None,
               existing_comment='JSON параметры задачи (custom_sql, target_tables и т.д.)',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('scheduled_tasks', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('scheduled_tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_scheduled_tasks_active'), table_name='scheduled_tasks', postgresql_where='(is_active = true)')
    op.drop_index(op.f('idx_scheduled_tasks_connection'), table_name='scheduled_tasks')
    op.drop_index(op.f('idx_scheduled_tasks_next_run'), table_name='scheduled_tasks', postgresql_where='(is_active = true)')
    op.drop_index(op.f('idx_scheduled_tasks_type'), table_name='scheduled_tasks')
    op.drop_constraint(op.f('scheduled_tasks_connection_id_fkey'), 'scheduled_tasks', type_='foreignkey')
    op.drop_table_comment(
        'scheduled_tasks',
        existing_comment='Запланированные задачи анализа PostgreSQL',
        schema=None
    )
    op.alter_column('task_executions', 'scheduled_task_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('task_executions', 'task_type',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               nullable=False,
               comment=None,
               existing_comment='Тип задачи: log_analysis, config_check, query_analysis, custom_sql, table_analysis')
    op.alter_column('task_executions', 'connection_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='ID подключения к базе данных, на которой выполняется задача')
    op.alter_column('task_executions', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('task_executions', 'parameters',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               comment=None,
               existing_comment='JSON параметры выполнения задачи (custom_sql, target_tables и т.д.)',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('task_executions', 'started_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('task_executions', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('task_executions', 'result',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index(op.f('idx_task_executions_connection'), table_name='task_executions')
    op.drop_index(op.f('idx_task_executions_scheduled_task'), table_name='task_executions')
    op.drop_index(op.f('idx_task_executions_started_at'), table_name='task_executions')
    op.drop_index(op.f('idx_task_executions_status'), table_name='task_executions')
    op.drop_index(op.f('idx_task_executions_task_type'), table_name='task_executions')
    op.drop_constraint(op.f('task_executions_connection_id_fkey'), 'task_executions', type_='foreignkey')
    op.drop_constraint(op.f('task_executions_scheduled_task_id_fkey'), 'task_executions', type_='foreignkey')
    op.drop_table_comment(
        'task_executions',
        existing_comment='История выполнения задач',
        schema=None
    )
    op.drop_column('task_executions', 'duration_ms')
    op.drop_column('task_executions', 'created_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('task_executions', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('task_executions', sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_table_comment(
        'task_executions',
        'История выполнения задач',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('task_executions_scheduled_task_id_fkey'), 'task_executions', 'scheduled_tasks', ['scheduled_task_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('task_executions_connection_id_fkey'), 'task_executions', 'connections', ['connection_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_task_executions_task_type'), 'task_executions', ['task_type'], unique=False)
    op.create_index(op.f('idx_task_executions_status'), 'task_executions', ['status'], unique=False)
    op.create_index(op.f('idx_task_executions_started_at'), 'task_executions', ['started_at'], unique=False)
    op.create_index(op.f('idx_task_executions_scheduled_task'), 'task_executions', ['scheduled_task_id'], unique=False)
    op.create_index(op.f('idx_task_executions_connection'), 'task_executions', ['connection_id'], unique=False)
    op.alter_column('task_executions', 'result',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('task_executions', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('task_executions', 'started_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('task_executions', 'parameters',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               comment='JSON параметры выполнения задачи (custom_sql, target_tables и т.д.)',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('task_executions', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('task_executions', 'connection_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='ID подключения к базе данных, на которой выполняется задача')
    op.alter_column('task_executions', 'task_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               nullable=True,
               comment='Тип задачи: log_analysis, config_check, query_analysis, custom_sql, table_analysis')
    op.alter_column('task_executions', 'scheduled_task_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table_comment(
        'scheduled_tasks',
        'Запланированные задачи анализа PostgreSQL',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('scheduled_tasks_connection_id_fkey'), 'scheduled_tasks', 'connections', ['connection_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_scheduled_tasks_type'), 'scheduled_tasks', ['task_type'], unique=False)
    op.create_index(op.f('idx_scheduled_tasks_next_run'), 'scheduled_tasks', ['next_run_at'], unique=False, postgresql_where='(is_active = true)')
    op.create_index(op.f('idx_scheduled_tasks_connection'), 'scheduled_tasks', ['connection_id'], unique=False)
    op.create_index(op.f('idx_scheduled_tasks_active'), 'scheduled_tasks', ['is_active'], unique=False, postgresql_where='(is_active = true)')
    op.alter_column('scheduled_tasks', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('scheduled_tasks', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('scheduled_tasks', 'task_params',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               comment='JSON параметры задачи (custom_sql, target_tables и т.д.)',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('scheduled_tasks', 'next_run_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('scheduled_tasks', 'last_run_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('scheduled_tasks', 'cron_schedule',
               existing_type=sa.VARCHAR(length=100),
               comment='Расписание в формате Cron',
               existing_nullable=False)
    op.alter_column('scheduled_tasks', 'connection_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('scheduled_tasks', 'task_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               comment='Тип задачи: log_analysis, config_check, query_analysis, custom_sql, table_analysis',
               existing_nullable=False)
    op.add_column('connections', sa.Column('tags', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=True, comment='Теги для группировки и фильтрации подключений'))
    op.create_table_comment(
        'connections',
        'Метаданные подключений к PostgreSQL. Credentials хранятся в Vault.',
        existing_comment=None,
        schema=None
    )
    op.drop_index(op.f('ix_connections_name'), table_name='connections')
    op.drop_index(op.f('ix_connections_id'), table_name='connections')
    op.create_index(op.f('idx_connections_name_env'), 'connections', ['name', 'environment'], unique=True)
    op.create_index(op.f('idx_connections_environment'), 'connections', ['environment'], unique=False)
    op.create_index(op.f('idx_connections_active'), 'connections', ['is_active'], unique=False, postgresql_where='(is_active = true)')
    op.create_unique_constraint(op.f('connections_vault_path_key'), 'connections', ['vault_path'], postgresql_nulls_not_distinct=False)
    op.alter_column('connections', 'description',
               existing_type=sa.TEXT(),
               comment='Описание подключения для пользователей',
               existing_nullable=True)
    op.alter_column('connections', 'environment',
               existing_type=sa.VARCHAR(length=50),
               comment='Окружение: development, staging, production',
               existing_nullable=True,
               existing_server_default=sa.text("'development'::character varying"))
    op.alter_column('connections', 'vault_path',
               existing_type=sa.VARCHAR(length=500),
               comment='Путь в Vault где хранятся учетные данные (host, port, dbname, username, password)',
               existing_nullable=False)
    op.create_table_comment(
        'connection_status',
        'Статус подключений к PostgreSQL',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'connection_status', type_='foreignkey')
    op.create_foreign_key(op.f('connection_status_connection_id_fkey'), 'connection_status', 'connections', ['connection_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'connection_status', type_='unique')
    op.drop_index(op.f('ix_connection_status_id'), table_name='connection_status')
    op.create_index(op.f('idx_connection_status_last_check'), 'connection_status', ['last_check'], unique=False)
    op.create_index(op.f('idx_connection_status_connection_id'), 'connection_status', ['connection_id'], unique=False)
    op.alter_column('connection_status', 'response_time_ms',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('connection_status', 'last_check',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('connection_status', 'connection_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table('analysis_results',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('connection_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('analysis_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('execution_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['connection_id'], ['connections.id'], name=op.f('analysis_results_connection_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['execution_id'], ['task_executions.id'], name=op.f('analysis_results_execution_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('analysis_results_pkey')),
    comment='Результаты анализа PostgreSQL (конфигурация, логи, запросы, таблицы)'
    )
    op.create_index(op.f('idx_analysis_results_type'), 'analysis_results', ['analysis_type'], unique=False)
    op.create_index(op.f('idx_analysis_results_execution_id'), 'analysis_results', ['execution_id'], unique=False)
    op.create_index(op.f('idx_analysis_results_created_at'), 'analysis_results', ['created_at'], unique=False)
    op.create_index(op.f('idx_analysis_results_connection_id'), 'analysis_results', ['connection_id'], unique=False)
    op.drop_table('connection_tags')
    op.drop_table('tags')
    # ### end Alembic commands ###
